.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_tutorials_ch1_fundamentals_ch1_3c_topography.py>`     to download the full example code
    .. rst-class:: sphx-glr-example-title

    .. _sphx_glr_tutorials_ch1_fundamentals_ch1_3c_topography.py:


1.3c: Adding topography to geological models
============================================


.. code-block:: python3

    import gempy as gp
    import numpy as np
    import matplotlib.pyplot as plt
    import os








1. The common procedure to set up a model:
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~



.. code-block:: python3

    data_path = 'https://raw.githubusercontent.com/cgre-aachen/gempy_data/master/'

    geo_model = gp.create_model('Single_layer_topo')
    gp.init_data(geo_model, extent=[450000, 460000, 70000, 80000, -1000, 500],
                 resolution=[50, 50, 50],
                 path_i=data_path + "/data/input_data/tut-ch1-7/onelayer_interfaces.csv",
                 path_o=data_path + "/data/input_data/tut-ch1-7/onelayer_orient.csv")





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Active grids: ['regular']

    Single_layer_topo  2020-08-14 11:02



use happy spring colors! 


.. code-block:: python3

    geo_model.surfaces.colors.change_colors({'layer1': '#ff8000', 'basement': '#88cc60'})









.. code-block:: python3

    gp.map_stack_to_surfaces(geo_model, {'series': ('layer1', 'basement')})






.. only:: builder_html

    .. raw:: html

        <style  type="text/css" >
            #T_b72e28be_de1d_11ea_ad2b_42010a14003frow0_col3 {
                    background-color:  #ff8000;
                }    #T_b72e28be_de1d_11ea_ad2b_42010a14003frow1_col3 {
                    background-color:  #88cc60;
                }</style><table id="T_b72e28be_de1d_11ea_ad2b_42010a14003f" ><thead>    <tr>        <th class="blank level0" ></th>        <th class="col_heading level0 col0" >surface</th>        <th class="col_heading level0 col1" >series</th>        <th class="col_heading level0 col2" >order_surfaces</th>        <th class="col_heading level0 col3" >color</th>        <th class="col_heading level0 col4" >id</th>    </tr></thead><tbody>
                        <tr>
                                <th id="T_b72e28be_de1d_11ea_ad2b_42010a14003flevel0_row0" class="row_heading level0 row0" >0</th>
                                <td id="T_b72e28be_de1d_11ea_ad2b_42010a14003frow0_col0" class="data row0 col0" >layer1</td>
                                <td id="T_b72e28be_de1d_11ea_ad2b_42010a14003frow0_col1" class="data row0 col1" >series</td>
                                <td id="T_b72e28be_de1d_11ea_ad2b_42010a14003frow0_col2" class="data row0 col2" >1</td>
                                <td id="T_b72e28be_de1d_11ea_ad2b_42010a14003frow0_col3" class="data row0 col3" >#ff8000</td>
                                <td id="T_b72e28be_de1d_11ea_ad2b_42010a14003frow0_col4" class="data row0 col4" >1</td>
                    </tr>
                    <tr>
                                <th id="T_b72e28be_de1d_11ea_ad2b_42010a14003flevel0_row1" class="row_heading level0 row1" >1</th>
                                <td id="T_b72e28be_de1d_11ea_ad2b_42010a14003frow1_col0" class="data row1 col0" >basement</td>
                                <td id="T_b72e28be_de1d_11ea_ad2b_42010a14003frow1_col1" class="data row1 col1" >series</td>
                                <td id="T_b72e28be_de1d_11ea_ad2b_42010a14003frow1_col2" class="data row1 col2" >2</td>
                                <td id="T_b72e28be_de1d_11ea_ad2b_42010a14003frow1_col3" class="data row1 col3" >#88cc60</td>
                                <td id="T_b72e28be_de1d_11ea_ad2b_42010a14003frow1_col4" class="data row1 col4" >2</td>
                    </tr>
            </tbody></table>
        <br />
        <br />


.. code-block:: python3

    s = {'s1': ([450000, 75000], [460000, 75500], [100, 100])}
    geo_model.set_section_grid(s)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Active grids: ['regular' 'sections']


.. only:: builder_html

    .. raw:: html

        <table border="1" class="dataframe">
          <thead>
            <tr style="text-align: right;">
              <th></th>
              <th>start</th>
              <th>stop</th>
              <th>resolution</th>
              <th>dist</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <th>s1</th>
              <td>[450000, 75000]</td>
              <td>[460000, 75500]</td>
              <td>[100, 100]</td>
              <td>10012.49</td>
            </tr>
          </tbody>
        </table>
        <br />
        <br />

2. Adding topography
~~~~~~~~~~~~~~~~~~~~


2 a. Load from raster file
^^^^^^^^^^^^^^^^^^^^^^^^^^


This is to make it work in sphinx gallery


.. code-block:: python3

    cwd = os.getcwd()
    if not 'examples' in cwd:
        path_dir = os.getcwd() + '/examples/tutorials/ch5_probabilistic_modeling'
    else:
        path_dir = cwd

    fp = path_dir + "/../../data/input_data/tut-ch1-7/bogota.tif"









.. code-block:: python3

    geo_model.set_topography(source='gdal', filepath=fp)
    gp.plot_2d(geo_model, show_topography=True, section_names=['topography'], show_lith=False,
               show_boundaries=False,
               kwargs_topography={'cmap': 'gray', 'norm': None}
               )
    plt.show()




.. image:: /tutorials/ch1_fundamentals/images/sphx_glr_ch1_3c_topography_001.png
    :alt: Geological map
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Cropped raster to geo_model.grid.extent.
    depending on the size of the raster, this can take a while...
    storing converted file...
    Active grids: ['regular' 'topography' 'sections']




2 b. create fun topography
^^^^^^^^^^^^^^^^^^^^^^^^^^


If there is no topography file, but you think that your model with
topography would look significantly cooler, you can use gempys
:meth:`set_topography <gempy.core.model.ImplicitCoKriging.set_topography>` function
to generate a random topography based on a fractal grid:


sphinx_gallery_thumbnail_number = 2


.. code-block:: python3

    geo_model.set_topography(source='random')
    gp.plot_2d(geo_model, show_topography=True, section_names=['topography'])
    plt.show()




.. image:: /tutorials/ch1_fundamentals/images/sphx_glr_ch1_3c_topography_002.png
    :alt: Geological map
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    [200. 500.]
    Active grids: ['regular' 'topography' 'sections']




It has additional keywords to play around with:

* fd: fractal dimension:
      defaults to 2.0. The higher (try 2.9), the rougher the landscape will
      be.

* d\_z: height difference:
      If none, last 20% of the model in z
      direction.

* extent:
      extent in xy direction. If none,
      ``geo_model.grid.extent`` is used.

* resolution:
      resolution of the topography array.
      If none, ``geo_model.grid.resoution`` is used. Increasing the resolution leads to
      much nicer geological maps!




.. code-block:: python3

    geo_model.set_topography(source='random', fd=1.9, d_z=np.array([0, 250]),
                             resolution=np.array([200, 200]))





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Active grids: ['regular' 'topography' 'sections']

    Grid Object. Values: 
    array([[450100.        ,  70100.        ,   -985.        ],
           [450100.        ,  70100.        ,   -955.        ],
           [450100.        ,  70100.        ,   -925.        ],
           ...,
           [460000.        ,  75500.        ,    469.6969697 ],
           [460000.        ,  75500.        ,    484.84848485],
           [460000.        ,  75500.        ,    500.        ]])



Note that each time this function is called, a new random topography is
created. If you particularly like the generated topography or if you
have loaded a large file with gdal, you can save the topography object
and load it again later:


save:


.. code-block:: python3

    geo_model._grid.topography.save('test_topo')








load:


.. code-block:: python3

    geo_model.set_topography(source='saved', filepath='test_topo.npy')





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Active grids: ['regular' 'topography' 'sections']

    Grid Object. Values: 
    array([[450100.        ,  70100.        ,   -985.        ],
           [450100.        ,  70100.        ,   -955.        ],
           [450100.        ,  70100.        ,   -925.        ],
           ...,
           [460000.        ,  75500.        ,    469.6969697 ],
           [460000.        ,  75500.        ,    484.84848485],
           [460000.        ,  75500.        ,    500.        ]])



Compute model
~~~~~~~~~~~~~



.. code-block:: python3

    gp.set_interpolator(geo_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Setting kriging parameters to their default values.
    Compiling theano function...
    Level of Optimization:  fast_compile
    Device:  cpu
    Precision:  float64
    Number of faults:  0
    Compilation Done!
    Kriging values: 
                       values
    range            1.4e+04
    $C_o$            4.8e+06
    drift equations      [3]

    <gempy.core.interpolator.InterpolatorModel object at 0x7f3efa655ed0>




.. code-block:: python3

    gp.compute_model(geo_model, compute_mesh=False, set_solutions=True)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none



    Lithology ids 
      [2. 2. 2. ... 1. 1. 1.] 




Visualize:
^^^^^^^^^^

Now, the solutions object does also contain the computed geological map.
It can be visualized using the 2D and 3D plotting functionality:



.. code-block:: python3

    gp.plot_2d(geo_model, show_topography=True, section_names=['topography'], show_boundaries=False, show_data=True)
    plt.show()





.. image:: /tutorials/ch1_fundamentals/images/sphx_glr_ch1_3c_topography_003.png
    :alt: Geological map
    :class: sphx-glr-single-img






.. code-block:: python3

    gp.plot_2d(geo_model, show_topography=True, section_names=['s1'])
    plt.show()




.. image:: /tutorials/ch1_fundamentals/images/sphx_glr_ch1_3c_topography_004.png
    :alt: s1
    :class: sphx-glr-single-img






.. code-block:: python3

    g3d = gp.plot_3d(geo_model,
                     show_topography=True,
                     show_lith=False,
                     show_surfaces=False,
                     show_results=False,
                     ve=5)




.. image:: /tutorials/ch1_fundamentals/images/sphx_glr_ch1_3c_topography_005.png
    :alt: ch1 3c topography
    :class: sphx-glr-single-img





sphinx_gallery_thumbnail_number = 3


.. code-block:: python3

    g3d = gp.plot_3d(geo_model,
                     show_topography=True,
                     show_lith=True,
                     show_surfaces=True,
                     ve=5)


.. image:: /tutorials/ch1_fundamentals/images/sphx_glr_ch1_3c_topography_006.png
    :alt: ch1 3c topography
    :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  22.380 seconds)


.. _sphx_glr_download_tutorials_ch1_fundamentals_ch1_3c_topography.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: ch1_3c_topography.py <ch1_3c_topography.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: ch1_3c_topography.ipynb <ch1_3c_topography.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
